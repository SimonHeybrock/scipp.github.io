{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting N-D data\n",
    "\n",
    "Data with any number of dimensions can also be plotted in Scipp."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipp as sc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Default representation\n",
    "\n",
    "Data with 3 or more dimensions are by default represented by a 2-D image, accompanied by sliders to navigate the extra dimensions (one slider per dimension above 2)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 50\n",
    "M = 40\n",
    "L = 30\n",
    "K = 20\n",
    "xx = np.arange(N, dtype=np.float64)\n",
    "yy = np.arange(M, dtype=np.float64)\n",
    "zz = np.arange(L, dtype=np.float64)\n",
    "qq = np.arange(K, dtype=np.float64)\n",
    "x, y, z, q = np.meshgrid(xx, yy, zz, qq, indexing='ij')\n",
    "b = N/20.0\n",
    "c = M/2.0\n",
    "d = L/2.0\n",
    "r = np.sqrt(((x-c)/b)**2 + ((y-c)/b)**2 + ((z-d)/b)**2  + ((q-d)/b)**2)\n",
    "a = np.sin(r)\n",
    "d = sc.Dataset()\n",
    "d['Some4Ddata'] = sc.Variable(dims=['x', 'y', 'z', 'Q_x'], values=a)\n",
    "d.coords['x'] = sc.Variable(dims=['x'], values=xx)\n",
    "d.coords['y'] = sc.Variable(dims=['y'], values=yy)\n",
    "d.coords['z'] = sc.Variable(dims=['z'], values=zz)\n",
    "d.coords['Q_x'] = sc.Variable(dims=['Q_x'], values=qq)\n",
    "sc.plot(d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Slider controls\n",
    "\n",
    "- Each dimension comes with two sliders to control the position of the slice and its thickness.\n",
    "\n",
    "- Upon figure creation, the thickness is set to the first bin width.\n",
    "Only the data contained in that bin is displayed.\n",
    "The thickness can be increased by an integer number of bins, and the data inside those bins will either be summed or averaged (see note below).\n",
    "\n",
    "- Changing the slice thickness will also change the color range, and the `Rescale` button can be used to automatically rescale the colorbar to the limits of the currently displayed data.\n",
    "\n",
    "- Each dimension control comes with a `Continuous Update` checkbox, which is applied by default.\n",
    "If this is unselected, the plot will only update once the slider has been released.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "*Note*\n",
    "    \n",
    "You can automatically recalculate the intensity range using the `Rescale` button on the left of the plot.\n",
    "When zooming or changing thickness, the enclosed viewed region is used to calculate the new intensities.\n",
    "In the general case the intensities are calculated as the `mean` of the values within.\n",
    "\n",
    "**In the special case of your variable having units of counts, the intensities are summed.**\n",
    "    \n",
    "</div>\n",
    "\n",
    "### Changing axes dimensions\n",
    "\n",
    "By default, the two innermost dimensions are used for the image, and the rest will be allocated to a slider.\n",
    "This can be changed, either interactively using the buttons, or by changing the dimension order using `transpose`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d['Some4Ddata'].transpose(dims=['z', 'y', 'Q_x', 'x']).plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Profile picking\n",
    "\n",
    "Finally, each dimension also comes with a `Profile` button which allows to display one of the additional dimensions as a profile underneath the main plot.\n",
    "\n",
    "- When hovering the mouse over the top image, the profile below is updated according to the mouse position.\n",
    "- Clicking on the image will save the current profile with a random color.\n",
    "- Clicking on an existing marker on the image will delete the corresponding saved profile."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3-D scatter plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note**\n",
    "\n",
    "3-D visualization requires `pythreejs` to be installed. Use either `pip` or `conda`:\n",
    "```\n",
    "- conda install -c conda-forge pythreejs\n",
    "- pip install pythreejs\n",
    "```\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3-D scatter plots can be created using `plot(projection='3d', positions='xyz')`, where the mandatory `positions` keyword argument is used to set the name of the position coord (here `'xyz'`) to use as position vectors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 1000\n",
    "M = 100\n",
    "theta = np.random.random(N) * np.pi\n",
    "phi = np.random.random(N) * 2.0 * np.pi\n",
    "r = 10.0 + (np.random.random(N) - 0.5)\n",
    "x = r * np.sin(theta) * np.sin(phi)\n",
    "y = r * np.sin(theta) * np.cos(phi)\n",
    "z = r * np.cos(theta)\n",
    "\n",
    "a = np.arange(M*N).reshape([M, N]) * np.sin(y)\n",
    "da = sc.DataArray(\n",
    "    data=sc.array(dims=['time', 'xyz'], values=a),\n",
    "    coords={\n",
    "        'xyz':sc.vectors(dims=['xyz'], unit='m', values=np.array([x, y, z]).T),\n",
    "        'time':sc.array(dims=['time'], unit='s', values=np.arange(M).astype(float))})\n",
    "da.plot(projection='3d', positions='xyz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cut surfaces to slice data in 3-D can be enabled using buttons below the scene.\n",
    "When using a cut surface, the upper value of the opacity slider controls the opacity of the slice, while the lower value of the slider controls the opacity of the background."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The scatter-plot functionality can also be used to create 3-D plots of dense data with slicing functionality.\n",
    "In this case we must first create a coordinate with positions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.coords['dummy-pos'] = sc.geometry.position(*[d.coords[dim] for dim in ['x', 'y', 'z']])\n",
    "sc.plot(d, projection='3d', positions='dummy-pos')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above example creating the coordinate was simple, since all three coords (`x`, `y`, and `z`) had the same unit.\n",
    "In general you may need to:\n",
    "- Set a consistent fake unit before using before calling `sc.geometry.position`.\n",
    "- Convert bin-edge coordinates to normal coordinates.\n",
    "\n",
    "It may be simpler to use dummy ranges as coordinates in that case:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ranges = [sc.arange(dim=dim, start=0.0, stop=d.sizes[dim]) for dim in ['x', 'y', 'z']]\n",
    "d.coords['dummy-pos'] = sc.geometry.position(*ranges)\n",
    "sc.plot(d, projection='3d', positions='dummy-pos')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LAMP's Superplot\n",
    "A `1d` projection is also available for multi-dimensional data, with the possibility to keep/remove lines that are plotted, a behavior we copied from LAMP's [Superplot](https://github.com/mantidproject/documents/blob/master/Requirements/Visualisation_and_Analysis/superplot.md) which was very popular in the neutron physics community."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(d, projection='1d')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
