{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Event data\n",
    "\n",
    "Scipp can handle *event data*, a certain type of sparse data, i.e., data that cannot directly be represented as a multi-dimensional array.\n",
    "For applications that rely solely on dense arrays of data this section can safely be ignored.\n",
    "\n",
    "Scipp supports event data in shape of a multi-dimensional array of lists.\n",
    "This could, e.g., be used to store data from an array of sensors/detectors that are read out independently, with potentially widely varying frequency.\n",
    "\n",
    "Event data can be created using a special `dtype`, `event_list_float64`, `event_list_float32`, `event_list_int64`, and `event_list_int32`.\n",
    "Since here we are not dealing with a dense array we cannot set values for all `x` from a numpy array.\n",
    "The recommended approach is to slice out all dimensions.\n",
    "Then the remaining values (for a particluar \"x\" in this case) are a dense array with a list-like interface.\n",
    "Initially all lists are empty:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipp as sc\n",
    "\n",
    "var = sc.Variable(dims=['x'],\n",
    "                  shape=[4],\n",
    "                  dtype=sc.dtype.event_list_float64)\n",
    "sc.show(var)\n",
    "var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 0].values = np.arange(3)\n",
    "var['x', 1].values.append(42)\n",
    "var['x', 0].values.extend(np.ones(3))\n",
    "var['x', 3].values = np.ones(6)\n",
    "sc.show(var)\n",
    "var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 0].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 2].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Operations between variables or datasets broadcast dense data to lists:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scale = sc.Variable(dims=['x'], values=np.arange(2.0, 6))\n",
    "var *= scale\n",
    "var['x', 0].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 2].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Event data in a data array can be associated with a corresponding event coordinate and event labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = sc.DataArray(data=var, coords={\n",
    "    'x': sc.Variable(['x'], values=np.arange(4.0)),\n",
    "    'y': var})\n",
    "var['x', 0].values = np.arange(7)\n",
    "var['x', 3].values = np.ones(2)\n",
    "sc.show(a)\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The lengths of the sublists between coordinate and values (and variances) must match.\n",
    "Scipp does not enforce this when modifying sublists, but *does* verify correctness in operations on variables or data arrays."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
