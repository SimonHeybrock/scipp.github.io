{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# What's new in scipp 0.7.0\n",
    "\n",
    "For a full list of changes see the [Release Notes](https://scipp.github.io/about/release-notes.html#v0-7-june-2021).\n",
    "\n",
    "## Various\n",
    "\n",
    "- Added `zeros_like`, `ones_like`, and `empty_like`.\n",
    "- Added `linspace`, `logspace`, `geomspace`, and `arange`.\n",
    "- Plotting supports `redraw()` method for updating existing plots with new data, without recreating the plot.\n",
    "\n",
    "## Performance\n",
    "\n",
    "- `sort` is now considerably faster for data with more rows.\n",
    "- reduction operations such as `sum` and `mean` are now also multi-threaded and thus considerably faster.\n",
    "\n",
    "## Python-like shallow/deep copy mechanism\n",
    "\n",
    "The most significant change in this scipp release is a fundamental rework of all scipp data structures (variables, data arrays, and datasets).\n",
    "These now behave mostly like nested Python objects, i.e., sub-objects are shared by default.\n",
    "Previously there was no sharing mechanism and scipp always made deep-copies.\n",
    "Some of the effects are exemplified in the following.\n",
    "\n",
    "### Variables\n",
    "\n",
    "For variables on their own, the new and old implementations mostly yield the same user experience.\n",
    "Previously, views of variables, such as created when slicing a variable along a dimension, returned a different type &ndash; `VariableView` &ndash; which kept alive the original `Variable`.\n",
    "This asymmetry is now gone.\n",
    "Slices or other views of variables are now also of type `Variable`, and all views share ownership of the underlying data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipp as sc\n",
    "if not sc.__version__.startswith('0.7'):\n",
    "    print(f'This notebook was made for scipp-0.7 and will likely not work with your version ({sc.__version__}).')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If a variable refers only to a section of the underlying data buffer this is now indicated in the HTML view in the title line as part of the size, here *\"16 Bytes out of 96 Bytes\"*.\n",
    "This allows for identification of \"small\" variables that keep alive potentially large buffers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var = sc.arange(dim='x', unit='m', start=0, stop=12)\n",
    "var['x', 4:6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To create a variable with sole ownership of a buffer, use the `copy()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var['x', 4:6].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default, `copy()` returns a deep copy.\n",
    "Shallow copies can be made by specifying `deep=False`, which preserves shared ownership of underlying buffers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "shallow_copy = var['x', 4:6].copy(deep=False)\n",
    "shallow_copy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data arrays\n",
    "\n",
    "The move away from the previous \"always deep copy\" mechanism avoids a number of critical issues.\n",
    "However, as a result of the new sharing mechanism extra care must now be taken in some cases, just like when working with any other Python library.\n",
    "Consider the following example, using the same variable for data and a coordinate:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da = sc.DataArray(data=var, coords={'x':var})\n",
    "da += 666 * sc.units.m\n",
    "da"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The modification unintentionally also affected the coordinate.\n",
    "However, if we think of data arrays and coordinate dicts as Python-like objects, the behavior should then not be surprising.\n",
    "\n",
    "Note that the original `var` is also affected:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apart from the more standard and pythonic behavior, one advantage of this is that creating data arrays from variables is now cheap, without inflicting copies of potentially large objects.\n",
    "\n",
    "A related change is the introduction of read-only flags.\n",
    "Consider the following attempt to modify the data via a slice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    da['x', 0].data = var['x', 2]\n",
    "except sc.DataArrayError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since `da['x',0]` is itself a data array, assigning to the `data` property would repoint the data to whatever is given on the right-hand side.\n",
    "However, this would not affect `da`, and the attempt to change the data would silently do nothing, since the temporary `da['x',0]` disappears immediately.\n",
    "The read-only flag protects us from this.\n",
    "\n",
    "To actually modify the slice, use `__setitem__` instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da['x', 0] = var['x', 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read-only flags were also introduced for variables, meta-data dicts (`coords`, `masks`, and `attrs` properties), data arrays and datasets.\n",
    "The flags solve a number of conceptual issues and serve as a safeguard against hidden bugs.\n",
    "\n",
    "### Datasets\n",
    "\n",
    "Just like creating data arrays from variables is now cheap (without deep-copies), inserting items into datasets does not inflict potentially expensive deep copies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = sc.Dataset()\n",
    "ds['a'] = da  # shallow copy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that while the buffers are shared, the meta-data dicts such as `coords`, `masks`, or `attrs` are not.\n",
    "Compare:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds['a'].attrs['attr'] = 1.2 * sc.units.m\n",
    "'attr' in da.attrs  # the attrs *dict* is copied"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "da.coords['x'] *= -1\n",
    "ds.coords['x']  # the coords *dict* is copied, but the 'x' coordinate references same buffer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Improvements possible due to sharing\n",
    "\n",
    "#### `to_unit`\n",
    "\n",
    "`to_unit` can now avoid making a copy if the input already has the desired unit.\n",
    "This can be used as a cheap way to ensure inputs have expected units:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sc.to_unit(var, 'm')  # no copy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `fold` and `flatten`\n",
    "\n",
    "`fold` now always returns views of data and all meta data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var = sc.ones(dims=['pixel'], shape=[100])\n",
    "xy = sc.fold(var, dim='pixel', sizes={'x':10, 'y':10})\n",
    "xy = sc.DataArray(data=xy,\n",
    "                  coords={\n",
    "                      'x':sc.array(dims=['x'], values=np.arange(10)),\n",
    "                      'y':sc.array(dims=['y'], values=np.arange(10))})\n",
    "xy['y',4] *= 0.0  # affects var\n",
    "var.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`flatten` also preserves reshaped data as a view, but unlike `fold` the same is not true for meta data in general, since it may require duplication in the flatten operation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "flat = sc.flatten(xy, to='pixel')\n",
    "flat['pixel', 0] = 22  # modifies var\n",
    "var.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vectors and matrices\n",
    "\n",
    "Several improvements for working with (3-D position) vectors and (3-D rotation) matrices are part of this release:\n",
    "\n",
    "- Creation functions were added:\n",
    "  - `vector` (a single vector)\n",
    "  - `vectors` (array of vectors)\n",
    "  - `matrix` (a single matrix),\n",
    "  - `matrices` (array of matrices).\n",
    "- Direct creation and initialization of 2-D (or higher) arrays of matrices and vectors is now possible from numpy arrays.\n",
    "- The values property now returns a numpy array with ndim+1 (vectors) or ndim+2 (matrices) axes, with the inner 1 (vectors) or 2 (matrices) axes corresponding to the vector or matrix axes.\n",
    "- Vector or matrix elements can now be accessed and modified directly using the new `fields` property of variables.\n",
    "  `fields` provides access to vector elements `x`, `y`, and `z` or matrix elements `xx`, `xy`, ..., `zz`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.vector(value=[1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs = sc.vectors(dims=['x'], unit='m', values=np.arange(12).reshape(4,3))\n",
    "vecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.fields.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.fields.z += 0.666 * sc.units.m\n",
    "vecs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Binned data buffer access\n",
    "\n",
    "The internal buffer holding the \"events\" underlying binned data was made previously available as `data.bins.constituents['data']`.\n",
    "This can now be accessed directly using the new `events` property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = int(800)\n",
    "data = sc.DataArray(\n",
    "    data=sc.Variable(dims=['event'], values=np.random.rand(N), unit='K'),\n",
    "    coords={\n",
    "        'x':sc.Variable(dims=['event'], values=np.random.rand(N)),\n",
    "        'y':sc.Variable(dims=['event'], values=np.random.rand(N)),\n",
    "        'z':sc.Variable(dims=['event'], values=np.random.rand(N))\n",
    "    })\n",
    "binned = sc.bin(data, edges=[sc.linspace(dim='x', start=0.0, stop=1.0, num=5),\n",
    "                             sc.linspace(dim='y', start=0.0, stop=1.0, num=5),\n",
    "                             sc.linspace(dim='z', start=0.0, stop=1.0, num=5)])\n",
    "binned.events"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that there is no guarantee about the order of events in this internal buffer.\n",
    "Furthermore, it includes all data including potentially reserved zones between bins, or events from bins that are not part of the current variable, for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_slice = binned['x', 0] \n",
    "x_slice.events  # ALL events, including those at different `x`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `events` property should thus be used with care.\n",
    "\n",
    "`events` is `None` for data that is not binned:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "binned.bins.sum().events is None"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }},
 "nbformat": 4,
 "nbformat_minor": 4
}
