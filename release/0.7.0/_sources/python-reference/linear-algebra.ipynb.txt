{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5fa5ca58-b746-4b6f-8ac3-8fba4ac2380c",
   "metadata": {},
   "source": [
    "# Linear Algebra\n",
    "\n",
    "## Basics\n",
    "\n",
    "Scipp supports basic linear algebra operations in 3 dimensions using vectors of length 3 and 3x3 matrices (to define rotations).\n",
    "Variables containing vectors or matrices are created using\n",
    "[scipp.vectors](../generated/scipp.vectors.html#scipp-vectors) (for an array of vectors)\n",
    "[scipp.vector](../generated/scipp.vector.html#scipp-vector) (for a single vector)\n",
    "[scipp.matrices](../generated/scipp.matrices.html#scipp-matrices) (for and array of matrices)\n",
    "[scipp.matrix](../generated/scipp.matrix.html#scipp-matrix) (for a single matrix).\n",
    "Let us consider an example, creating a 1-D variable containg vectors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb04ef53-39ef-4320-b7e9-2a7fdc61026a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipp as sc\n",
    "import numpy as np\n",
    "\n",
    "vecs = sc.vectors(dims=['x'], unit='m', values=np.arange(2 * 3).reshape(2, 3))\n",
    "vecs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37049758-fb73-4d18-aadb-64ea3b2ca40b",
   "metadata": {},
   "source": [
    "While `vecs` has only a single dimension `x`, the `values` property exposes the underlying vector value as a 2-D array of `float64`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f73f4960-ec75-4576-aa9f-f2b077b9809a",
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9bc14bc-d100-4bfb-bcfd-fd89ebd743d1",
   "metadata": {},
   "source": [
    "Access to individual vector components `x`, `y`, and `z` is provided using the special `fields` property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30cb2021-e3e8-4953-9086-e02d70d00f8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.fields.x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a0b726e-9d83-4474-a4d4-39903b4ae8f1",
   "metadata": {},
   "source": [
    "These properties return a view to the underlying data and thus support setting element values as well as in-place modification:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03017333-7ba0-49c3-88c6-4d4a8bc98381",
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs.fields.x = 123.0 * sc.units.m\n",
    "vecs.fields.y += 0.123 * sc.units.m\n",
    "vecs.values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60e1b618-ec63-4da2-8374-a4655fdb0a66",
   "metadata": {},
   "source": [
    "This works in an identical manner for matrices with the properties `xx`, `xy`, `xz`, `yx`, `yy`, `yz`, `zx`, `zy`, and `zz`.\n",
    "The `values` property allows for use of, e.g., numpy functionality.\n",
    "We may, e.g., compute the inverse using `numpy.linalg.inv`, which is not supported in scipp yet:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9907b95e-3192-4931-9b25-62f8039535e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)  # matrices are not singular for this seed\n",
    "mats = sc.matrices(dims=['x'], values=np.random.rand(2, 3, 3))\n",
    "inv = sc.matrices(dims=['x'], values=np.linalg.inv(mats.values))\n",
    "(mats * inv).values.round(decimals=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd597add-0ecd-47a2-a38c-b28b60a28c09",
   "metadata": {},
   "source": [
    "## Example\n",
    "\n",
    "We create some random data and use positions to create a plot with `projection='3d'` to illustrate some concepts.\n",
    "Image this as an image sensor with 12x12 pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bec94cc4-37b1-4f26-abbc-b4fbd574bbdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "nx = 12\n",
    "ny = 12\n",
    "x = sc.linspace(dim='x', start=-0.1, stop=0.1, num=nx, unit='m')\n",
    "y = sc.linspace(dim='y', start=-0.1, stop=0.1, num=ny, unit='m')\n",
    "da = sc.DataArray(\n",
    "    data=sc.array(dims=['x','y'], values=np.random.rand(nx, ny)),\n",
    "    coords={'position':sc.geometry.position(x, y, 0.0*sc.units.m)}\n",
    ")\n",
    "sc.plot(da, projection=\"3d\", positions=\"position\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d852b52-613c-4168-88f2-1de4340c77b8",
   "metadata": {},
   "source": [
    "We can use the vector-element access properties in combination with slicing to offset some of the pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "207e32b8-3e7f-4a79-8821-e9bdefe48e98",
   "metadata": {},
   "outputs": [],
   "source": [
    "da.coords['position']['x',5:].fields.x += 0.1 * sc.units.m\n",
    "da.coords['position']['y',5:].fields.y += 0.05 * sc.units.m\n",
    "\n",
    "sc.plot(da, projection=\"3d\", positions=\"position\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbf54580-29d3-40bb-96bd-a93f3ff4c26f",
   "metadata": {},
   "source": [
    "We use `sc.matrix` to create a rotation matrix (in this case to rotate by 30 deg around the `y` axis) and apply it to the positions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83fe9f32-26cc-43d0-b6fa-ae761f09b221",
   "metadata": {},
   "outputs": [],
   "source": [
    "rotation = sc.matrix(value=[[ 0.8660254, 0.0000000, 0.5000000],\n",
    "                            [ 0.0000000, 1.0000000, 0.0000000],\n",
    "                            [-0.5000000, 0.0000000, 0.8660254]])\n",
    "\n",
    "da.coords['position']['x',5:] = rotation * da.coords['position']['x',5:]\n",
    "sc.plot(da, projection=\"3d\", positions=\"position\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c6896d2-f99e-49a8-8b09-256f38ce48bb",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note:** More convenient tools for creating rotations around axes are on the roadmap.\n",
    "\n",
    "</div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
